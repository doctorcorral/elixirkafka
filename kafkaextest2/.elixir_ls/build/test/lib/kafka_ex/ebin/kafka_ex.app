{application,kafka_ex,
             [{description,"Kafka client for Elixir/Erlang."},
              {modules,['Elixir.Enumerable.KafkaEx.Stream','Elixir.KafkaEx',
                        'Elixir.KafkaEx.Compression','Elixir.KafkaEx.Config',
                        'Elixir.KafkaEx.ConsumerGroup',
                        'Elixir.KafkaEx.ConsumerGroup.Heartbeat',
                        'Elixir.KafkaEx.ConsumerGroup.Heartbeat.State',
                        'Elixir.KafkaEx.ConsumerGroup.Manager',
                        'Elixir.KafkaEx.ConsumerGroup.Manager.State',
                        'Elixir.KafkaEx.ConsumerGroup.PartitionAssignment',
                        'Elixir.KafkaEx.ConsumerGroupRequiredError',
                        'Elixir.KafkaEx.GenConsumer',
                        'Elixir.KafkaEx.GenConsumer.State',
                        'Elixir.KafkaEx.GenConsumer.Supervisor',
                        'Elixir.KafkaEx.InvalidConsumerGroupError',
                        'Elixir.KafkaEx.NetworkClient',
                        'Elixir.KafkaEx.Protocol',
                        'Elixir.KafkaEx.Protocol.Common',
                        'Elixir.KafkaEx.Protocol.ConsumerMetadata',
                        'Elixir.KafkaEx.Protocol.ConsumerMetadata.Response',
                        'Elixir.KafkaEx.Protocol.Fetch',
                        'Elixir.KafkaEx.Protocol.Fetch.Message',
                        'Elixir.KafkaEx.Protocol.Fetch.Request',
                        'Elixir.KafkaEx.Protocol.Fetch.Response',
                        'Elixir.KafkaEx.Protocol.Heartbeat',
                        'Elixir.KafkaEx.Protocol.Heartbeat.Request',
                        'Elixir.KafkaEx.Protocol.Heartbeat.Response',
                        'Elixir.KafkaEx.Protocol.JoinGroup',
                        'Elixir.KafkaEx.Protocol.JoinGroup.Request',
                        'Elixir.KafkaEx.Protocol.JoinGroup.Response',
                        'Elixir.KafkaEx.Protocol.LeaveGroup',
                        'Elixir.KafkaEx.Protocol.LeaveGroup.Request',
                        'Elixir.KafkaEx.Protocol.LeaveGroup.Response',
                        'Elixir.KafkaEx.Protocol.Metadata',
                        'Elixir.KafkaEx.Protocol.Metadata.Broker',
                        'Elixir.KafkaEx.Protocol.Metadata.PartitionMetadata',
                        'Elixir.KafkaEx.Protocol.Metadata.Request',
                        'Elixir.KafkaEx.Protocol.Metadata.Response',
                        'Elixir.KafkaEx.Protocol.Metadata.TopicMetadata',
                        'Elixir.KafkaEx.Protocol.Offset',
                        'Elixir.KafkaEx.Protocol.Offset.Request',
                        'Elixir.KafkaEx.Protocol.Offset.Response',
                        'Elixir.KafkaEx.Protocol.OffsetCommit',
                        'Elixir.KafkaEx.Protocol.OffsetCommit.Request',
                        'Elixir.KafkaEx.Protocol.OffsetCommit.Response',
                        'Elixir.KafkaEx.Protocol.OffsetFetch',
                        'Elixir.KafkaEx.Protocol.OffsetFetch.Request',
                        'Elixir.KafkaEx.Protocol.OffsetFetch.Response',
                        'Elixir.KafkaEx.Protocol.Produce',
                        'Elixir.KafkaEx.Protocol.Produce.Message',
                        'Elixir.KafkaEx.Protocol.Produce.Request',
                        'Elixir.KafkaEx.Protocol.Produce.Response',
                        'Elixir.KafkaEx.Protocol.SyncGroup',
                        'Elixir.KafkaEx.Protocol.SyncGroup.Assignment',
                        'Elixir.KafkaEx.Protocol.SyncGroup.Request',
                        'Elixir.KafkaEx.Protocol.SyncGroup.Response',
                        'Elixir.KafkaEx.Server','Elixir.KafkaEx.Server.State',
                        'Elixir.KafkaEx.Server0P8P0',
                        'Elixir.KafkaEx.Server0P8P2',
                        'Elixir.KafkaEx.Server0P9P0','Elixir.KafkaEx.Socket',
                        'Elixir.KafkaEx.Stream','Elixir.KafkaEx.Supervisor']},
              {registered,[]},
              {vsn,"0.8.3"},
              {mod,{'Elixir.KafkaEx',[]}},
              {applications,[kernel,stdlib,elixir,logger,ssl]}]}.
